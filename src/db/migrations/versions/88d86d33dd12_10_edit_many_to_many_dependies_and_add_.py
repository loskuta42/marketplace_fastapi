"""10_edit_many_to_many_dependies_and_add_assotiation_table_platform_game

Revision ID: 88d86d33dd12
Revises: 8e8ea92c717e
Create Date: 2023-03-22 13:19:05.663202

"""
from alembic import op
import sqlalchemy as sa
import sqlalchemy_utils

from src.models.enums import UserRoles

# revision identifiers, used by Alembic.
revision = '88d86d33dd12'
down_revision = '8e8ea92c717e'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('developers',
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('name', sa.String(length=150), nullable=False),
    sa.Column('country', sa.String(length=150), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('genres',
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('name', sa.String(length=75), nullable=False),
    sa.Column('slug', sa.String(length=75), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('description', sa.String(length=255), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_index(op.f('ix_genres_created_at'), 'genres', ['created_at'], unique=False)
    op.create_table('platforms',
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('name', sa.String(length=75), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('publishers',
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('name', sa.String(length=150), nullable=False),
    sa.Column('country', sa.String(length=150), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('users',
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('username', sa.String(length=125), nullable=False),
    sa.Column('email', sqlalchemy_utils.types.email.EmailType(length=255), nullable=False),
    sa.Column('hashed_password', sa.String(length=125), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('role', sqlalchemy_utils.types.choice.ChoiceType(choices=UserRoles), nullable=False),
    sa.Column('reset_token', sa.String(length=500), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('username')
    )
    op.create_index(op.f('ix_users_created_at'), 'users', ['created_at'], unique=False)
    op.create_table('games',
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('name', sa.String(length=75), nullable=False),
    sa.Column('price', sa.Float(precision=2, asdecimal=True), nullable=False),
    sa.Column('discount', sa.Float(precision=2, asdecimal=True), nullable=True),
    sa.Column('description', sa.String(length=500), nullable=False),
    sa.Column('release_date', sa.DateTime(), nullable=False),
    sa.Column('platform_id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.ForeignKeyConstraint(['platform_id'], ['platforms.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_games_release_date'), 'games', ['release_date'], unique=False)
    op.create_table('developers_games',
    sa.Column('developer_id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('game_id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.ForeignKeyConstraint(['developer_id'], ['developers.id'], ),
    sa.ForeignKeyConstraint(['game_id'], ['games.id'], ),
    sa.PrimaryKeyConstraint('developer_id', 'game_id')
    )
    op.create_table('genres_games',
    sa.Column('genre_id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('game_id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.ForeignKeyConstraint(['game_id'], ['games.id'], ),
    sa.ForeignKeyConstraint(['genre_id'], ['genres.id'], ),
    sa.PrimaryKeyConstraint('genre_id', 'game_id')
    )
    op.create_table('platforms_games',
    sa.Column('platform_id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('game_id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.ForeignKeyConstraint(['game_id'], ['games.id'], ),
    sa.ForeignKeyConstraint(['platform_id'], ['platforms.id'], ),
    sa.PrimaryKeyConstraint('platform_id', 'game_id')
    )
    op.create_table('publishers_games',
    sa.Column('publisher_id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.Column('game_id', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.ForeignKeyConstraint(['game_id'], ['games.id'], ),
    sa.ForeignKeyConstraint(['publisher_id'], ['publishers.id'], ),
    sa.PrimaryKeyConstraint('publisher_id', 'game_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('publishers_games')
    op.drop_table('platforms_games')
    op.drop_table('genres_games')
    op.drop_table('developers_games')
    op.drop_index(op.f('ix_games_release_date'), table_name='games')
    op.drop_table('games')
    op.drop_index(op.f('ix_users_created_at'), table_name='users')
    op.drop_table('users')
    op.drop_table('publishers')
    op.drop_table('platforms')
    op.drop_index(op.f('ix_genres_created_at'), table_name='genres')
    op.drop_table('genres')
    op.drop_table('developers')
    # ### end Alembic commands ###
